BAZEL_RUN_CMD = "bazel run --platforms=@io_bazel_rules_go//go/toolchain:linux_amd64 %s"

BAZEL_SOURCES_CMD = """bazel query 'kind("source file", deps(set(%s)))'"""

BAZEL_BUILDFILES_CMD = "bazel query 'buildfiles(deps(set(%s)))'"


def watch_labels(labels):
  watched_files = []
  for l in labels:
    if l.startswith("@"):
      continue
    elif l.startswith("//external/") or l.startswith("//external:"):
      continue
    elif l.startswith("//"):
      l = l[2:]

    path = l.replace(":", "/")
    if path.startswith("/"):
      path = path[1:]

    read_file(path)
    watched_files.append(path)

  return watched_files

def bazel_k8s(target):
    """Get YAML and dependencies from a k8s_object or similar Bazel target.

    Args:
        target (str): An executable Bazel target that outputs YAML when run.

    Returns:
        str: The YAML or other output from running the target.
    """
    yaml = local("bazel run %s" % target)

    dep_labels = str(local(BAZEL_SOURCES_CMD % target)).splitlines()
    dep_labels += str(local(BAZEL_BUILDFILES_CMD % target)).splitlines()

    watch_labels(dep_labels)
    return yaml

def bazel_build(image, target):
  config_labels = str(local(BAZEL_BUILDFILES_CMD % target)).splitlines()
  watch_labels(config_labels)

  dep_labels = str(local(BAZEL_SOURCES_CMD % target)).splitlines()
  dep_files = []
  for l in dep_labels:
    if l.startswith("@"):
      continue
    elif l.startswith("//external/") or l.startswith("//external:"):
      continue
    elif l.startswith("//"):
      l = l[2:]

    path = l.replace(":", "/")
    if path.startswith("/"):
      path = path[1:]

    dep_files.append(path)

  custom_build(
    image,
    BAZEL_RUN_CMD % target,
    dep_files,
    tag="image",
  )

k8s_yaml(bazel_k8s(":snack-server"))
k8s_yaml(bazel_k8s(":vigoda-server"))

bazel_build('bazel/snack', "//snack:image")
bazel_build('bazel/vigoda', "//vigoda:image")

k8s_resource('snack', image='bazel/snack', port_forwards=9000)
k8s_resource('vigoda', image='bazel.vigoda', port_forwards=9001)
